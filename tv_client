#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import print_function

import sys
import logging
import socket
import codecs
import select
import io
import StringIO

from os import environ as env
from optparse import OptionParser

from system import BusinessObject, InvalidObject
from tv import make_registration_object

u8 = codecs.getwriter('utf-8')(sys.stdout)
logger = logging.getLogger('raw_client')

def show(obj):
    print(unicode(obj), file=u8)
    print(obj.metadata, file=u8)
    if obj.of_content_type('image'):
        try:
            import Image
            im = Image.open(StringIO.StringIO(obj.payload))
        except Exception, e:
            print("Got %s when trying to open and show image" % str(e))
            

def read_show_loop(sock):
    while True:
        rlist, wlist, xlist = select.select([sock], [], [], 1)
        if len(rlist) > 0:
            obj = BusinessObject.read_from_socket(sock)
            if obj is None:
                raise InvalidObject
            show(obj)

def main():
    parser = OptionParser()
    parser.add_option("-d", "--debug", action="store_true", dest="debug", default=False,
                      help="logging level DEBUG")
    parser.add_option("--host", dest="host", default="localhost")
    parser.add_option("--port", dest="port", default=7890, type="int")
   
    opts, args = parser.parse_args()

    if opts.debug:
        logging.basicConfig(level=logging.DEBUG)
    logging.basicConfig(level=logging.INFO)

    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((opts.host, opts.port))

    make_registration_object(sys.argv[0], env['USER']).serialize(socket=sock)

    try:
        while True:
            try:
                read_show_loop(sock)
            except InvalidObject, ivo:
                logger.error("Received invalid object!")
                break
    except KeyboardInterrupt, kbi:
        sock.close()


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt, ke:
        logger.info("Exiting.")
