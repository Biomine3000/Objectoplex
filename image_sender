#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import print_function

import sys
import logging
import socket
import codecs
import select
import io

from os.path import isdir, join
from os import listdir
from optparse import OptionParser
from mimetypes import guess_type
from time import sleep
from os import environ as env

from objectoplex import BusinessObject

logger = logging.getLogger('image_sender')

def collect_items(path):
    ret = []

    for item in listdir(path):
        item_path = join(path, item)
        
        if isdir(item_path):
            for i in collect_items(item_path):
                ret.append(i)

        item_type, encoding = guess_type(item_path)

        if item_type is None or not item_type.startswith('image/'):
            continue

        ret.append(item_path)

    return ret

def send_item(item, sock):
    try:
        while True:
            rlist, wlist, xlist = select.select([], [sock], [], 1)
            if len(wlist) > 0:
                item.serialize(socket=sock)
                break
    except KeyboardInterrupt, kbi:
        raise kbi

def main():
    parser = OptionParser()
    parser.add_option("-d", "--debug", action="store_true", dest="debug", default=False,
                      help="logging level DEBUG")

    parser.add_option("--host", dest="host", default="localhost")
    parser.add_option("--port", dest="port", default=7890, type="int")
    
    parser.add_option("--delay", dest="delay", default=1.0, type="float")

    opts, args = parser.parse_args()

    items = set()

    for item in args:
        if isdir(item):
            for i in collect_items(item):
                items.add(i)
        else:
            items.add(item)

    if opts.debug:
        logging.basicConfig(level=logging.DEBUG)
    logging.basicConfig(level=logging.INFO)

    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((opts.host, opts.port))

    metadata = {
        'event': 'clients/register',
        'receive': 'none',
        'subscriptions': 'none',
        'name': 'image_sender',
        'user': env['USER']
        }
    BusinessObject(metadata, None).serialize(socket=sock)

    while True:
        for item in items:
            obj = BusinessObject.from_file(item)
            send_item(obj, sock)
            try:
                logger.info(u"Sent {0}".format(item.encode('ascii', 'ignore')))
            except UnicodeDecodeError, e:
                pass
            sleep(opts.delay)


if __name__ == '__main__':
    try:
        main()
    except KeyError, ke:
        logger.info("Exiting.")
