#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Wrapper command for service modules.

Usage: ./service --module services/service_module_name_without_dot_py
"""

import sys
import imp
import logging

from optparse import OptionParser

logger = logging.getLogger('service')

class InvalidFormatError(Exception): pass

def main():
    global logger
    parser = OptionParser()
    parser.add_option("-d", "--debug", action="store_true", dest="debug", default=False,
                      help="logging level DEBUG")
    parser.add_option("--host", dest="host", default="localhost")
    parser.add_option("--port", dest="port", default=7890, type="int")
    parser.add_option("--activity-timeout", dest="timeout", default=60, type="int", metavar='SECONDS')
    parser.add_option("--module", dest="module", default=None)

    opts, args = parser.parse_args()
    if not opts.module:
        parser.error("--module required!")

    if opts.debug:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    logger = logging.getLogger(opts.module)

    if '/' in opts.module:
        module_path = '/'.join(opts.module.split('/', )[:-1])
        module_name = opts.module.split('/', )[-1]
        sys.path.append(module_path)
        file, pathname, description = imp.find_module(module_name)
    else:
        file, pathname, description = imp.find_module(opts.module)

    module = imp.load_module(opts.module, file, pathname, description)

    service_args = {}
    if len(args) > 0:
        for arg in args:
            if '=' not in arg:
                raise InvalidFormatError("service parameters should be in the form key=value")
            parts = arg.split('=', 1)
            service_args[parts[0]] = parts[1]

    try:
        service = module.service(opts.host, opts.port, activity_timeout=opts.timeout, args=service_args)
        service.start()
    except KeyboardInterrupt, kbi:
        service.cleanup()


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt, ke:
        logger.info("Exiting.")
