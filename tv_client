#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import print_function

import sys
import logging
import socket
import codecs
import select
import io
import StringIO

from datetime import datetime, timedelta
from os import environ as env
from argparse import ArgumentParser

from objectoplex import BusinessObject, InvalidObject, subscription_object
from objectoplex import registration_object, print_readably

u8 = codecs.getwriter('utf-8')(sys.stdout)
logger = logging.getLogger('raw_client')

def list_clients_object():
    metadata = {
        'event': 'services/request',
        'name': 'clients',
        'request': 'list',
        }
    return BusinessObject(metadata, None)

def show(obj, include_keys=set()):
    print_readably(obj, file=u8, include=include_keys)
    if obj.of_content_type('image'):
        try:
            import Image
            im = Image.open(StringIO.StringIO(obj.payload))
        except Exception, e:
            print("Got %s when trying to open and show image" % str(e))


def read_show_loop(sock, include_keys=set()):
    iter = 0
    last_list_requested = datetime.now()
    while True:
        if last_list_requested + timedelta(minutes=60) < datetime.now():
            while True:
                rlist, wlist, xlist = select.select([], [sock], [], 1)
                if len(wlist) > 0:
                    list_clients_object().serialize(sock)
                    break
            last_list_requested = datetime.now()

        rlist, wlist, xlist = select.select([sock], [], [], 1)
        if len(rlist) > 0:
            obj = BusinessObject.read_from_socket(sock)
            if obj is None:
                raise InvalidObject
            show(obj, include_keys=include_keys)

        iter += 1

def main():
    parser = ArgumentParser(description='Use Biomine-TV on the command line!')
    parser.add_argument("-d", "--debug", action="store_true", dest="debug", default=False,
                        help="logging level DEBUG")
    parser.add_argument("--host", dest="host", default="localhost")
    parser.add_argument("--port", dest="port", default=7890, type=int)
    parser.add_argument("--include-keys", dest="include_keys", default=[], type=str, nargs='+',
                        help="show these keys in the pretty-printed output", metavar="KEY")

    opts = parser.parse_args()

    if opts.debug:
        logging.basicConfig(level=logging.DEBUG)
    logging.basicConfig(level=logging.INFO)

    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((opts.host, opts.port))

    subscription_object().serialize(socket=sock)
    registration_object(sys.argv[0], env['USER']).serialize(socket=sock)
    try:
        while True:
            try:
                read_show_loop(sock, include_keys=opts.include_keys)
            except InvalidObject, ivo:
                logger.error("Received invalid object!")
                break
    except KeyboardInterrupt, kbi:
        sock.close()


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt, ke:
        logger.info("Exiting.")
