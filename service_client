#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import with_statement, print_function

import socket
import select
import io
import logging
import json

from argparse import ArgumentParser
from time import sleep
from os import environ as env
from sys import stdout, stderr
from codecs import getwriter
from datetime import datetime, timedelta

from system import BusinessObject, InvalidObject
from tv import print_readably

logger = logging.getLogger('service_client')
u8 = getwriter('utf-8')(stdout)
e8 = getwriter('utf-8')(stderr)

def raw_print(writable, file=stdout):
    if writable is None:
        return
    with io.FileIO(file.fileno(), 'w', closefd=False) as f:
        writer = io.BufferedWriter(f, buffer_size=len(writable))
        writer.write(writable)
        writer.flush()
        file.flush()

def print_discovery_result(replies):
    if len(replies) == 0:
        print(u"No services discovered!")
        return
    print(u"{0}\t{1}".format('service name', 'routing-id'))
    for obj in replies:
        print(u"{0}\t{1}".format(obj.metadata['name'], obj.metadata['route'][0]))

def main():
    parser = ArgumentParser(description='Make object system service calls')
    parser.add_argument('call', metavar='CALL', nargs=1,
                        help='Service to call')
    parser.add_argument('arg', metavar='ARG', nargs='*',
                        help='arguments to call')

    parser.add_argument("--host", dest="host", default="localhost")
    parser.add_argument("--port", dest="port", default=7890, type=int)
    parser.add_argument("-d", "--debug", action="store_true", dest="debug", default=False,
                        help="logging level DEBUG")
    parser.add_argument("-m", "--metadata-only", action="store_true", dest="metadata_only",
                        default=False, help="only print out metadata")
    parser.add_argument("-p", "--payload-only", action="store_true", dest="payload_only",
                        default=False, help="only print out the payload")
    parser.add_argument("-r", "--readably", action="store_true", dest="readably",
                        default=False, help="return pretty-printed, readable output")
    parser.add_argument("--include-keys", dest="include_keys", default=[], type=str, nargs='+',
                        help="show these keys in the pretty-printed output", metavar="KEY")
    opts = parser.parse_args()

    if opts.debug:
        logging.basicConfig(level=logging.DEBUG)
        logger.debug("Debug logging turned on!")
    logging.basicConfig(level=logging.INFO)

    options = {}
    arguments = []
    for item in opts.arg:
        if '=' in item:
            k, v = item.split('=', 1)
            options[k] = v
        else:
            arguments.append(item)
    logger.debug(u"Calling {0} with options: {1} and arguments: {2}".format(opts.call, options, arguments))

    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((opts.host, opts.port))

    metadata = {
        'event': 'clients/register',
        'receive': 'all',
        'subscriptions': 'all',
        'name': 'service_client',
        'user': env['USER']
        }
    reg = BusinessObject(metadata, None)
    reg.serialize(socket=sock)
    logger.debug("Sent registration object: {0}".format(reg.metadata))

    if opts.call[0] == 'discovery':
        metadata = {'event': 'services/discovery'}
    else:
        metadata = {'event': 'services/request',
                    'name': opts.call[0],
                    'arguments': arguments }

    for k, v in options.iteritems():
        if k not in metadata:
            metadata[k] = v

    req = BusinessObject(metadata, None)
    req.serialize(sock)

    logger.debug(u"Sent service call: {0}".format(req.metadata))

    started = datetime.now()
    discovery_replies = []
    while True:
        rlist, wlist, xlist = select.select([sock], [], [], 1)
        if datetime.now() - timedelta(seconds=3) > started:
            print_discovery_result(discovery_replies)
            break
        elif len(rlist) > 0:
            resp = BusinessObject.read_from_socket(sock)
            if resp is None:
                raise InvalidObject
            elif resp.event == 'services/discovery/reply':
                discovery_replies.append(resp)
            elif resp.event == 'services/reply' and \
                   resp.metadata.get('in-reply-to') == req.id:
                if opts.payload_only:
                    raw_print(resp.payload)
                elif opts.metadata_only:
                    if opts.readably:
                        print_readably(resp, file=u8, no_payload=True, include=opts.include_keys)
                    else:
                        raw_print(bytearray(json.dumps(resp.metadata,
                                                       ensure_ascii=False),
                                            encoding='utf-8'))
                else:
                    if opts.readably:
                        print_readably(resp, file=u8, include=opts.include_keys)
                    else:
                        resp.serialize(u8)
                break

    sock.close()


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt, ke:
        print("Exiting.")
