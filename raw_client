#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import print_function

import sys
import logging
import socket
import codecs
import select
import io

from optparse import OptionParser

from system import BusinessObject

u8 = codecs.getwriter('utf-8')(sys.stdout)
logger = logging.getLogger('raw_client')

class InvalidObject(Exception): pass

def main():
    parser = OptionParser()
    parser.add_option("-d", "--debug", action="store_true", dest="debug", default=False,
                      help="logging level DEBUG")
    parser.add_option("--listen", dest="listen", default=False, action="store_true")

    parser.add_option("--host", dest="host", default="localhost")
    parser.add_option("--port", dest="port", default=7890, type="int")
   
    opts, args = parser.parse_args()

    if opts.debug:
        logging.basicConfig(level=logging.DEBUG)
    logging.basicConfig(level=logging.INFO)

    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((opts.host, opts.port))

    with io.FileIO(sys.stdin.fileno(), 'r') as si:
        read = si.read(1)
        while read != "":
            sock.sendall(read)
            read = si.read(1)

    if opts.listen:
        try:
            while True:
                rlist, wlist, xlist = select.select([sock], [], [], 1)
                if len(rlist) > 0:
                    obj = BusinessObject.read_from_socket(sock)
                    if obj is None:
                        raise InvalidObject
                    print(unicode(obj), file=u8)
                    print(obj.metadata, file=u8)
        except KeyboardInterrupt, kbi:
            sock.close()
        except InvalidObject, ivo:
            logger.error("Received invalid object; bailing out!")
            sock.close()
    else:
        sock.close()


if __name__ == '__main__':
    try:
        main()
    except KeyError, ke:
        logger.info("Exiting.")
